//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace BasisRegisters.Vlaanderen
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IBasisRegisterService
    {
        /// <summary>Vraag een gemeente op.</summary>
        /// <param name="objectId">Identificator van de gemeente.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de gemeente gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MunicipalityResponse> GetMunicipalityAsync(int objectId, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een gemeente op.</summary>
        /// <param name="objectId">Identificator van de gemeente.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de gemeente gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MunicipalityResponse> GetMunicipalityAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met gemeenten op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gemeenten gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MunicipalityListResponse> ListMunicipalitiesAsync(int? offset, int? limit, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met gemeenten op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gemeenten gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MunicipalityListResponse> ListMunicipalitiesAsync(int? offset, int? limit, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag postinfo voor een postcode op.</summary>
        /// <param name="objectId">Identificator van de postinfo.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de postinfo voor een postcode gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostalInformationResponse> GetPostalCodeAsync(string objectId, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag postinfo voor een postcode op.</summary>
        /// <param name="objectId">Identificator van de postinfo.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de postinfo voor een postcode gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostalInformationResponse> GetPostalCodeAsync(string objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met postinfo over postcodes op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de postcodes (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met postinfo over postcodes gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostalInformationListResponse> ListPostalCodesAsync(int? offset, int? limit, string gemeentenaam, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met postinfo over postcodes op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de postcodes (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met postinfo over postcodes gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PostalInformationListResponse> ListPostalCodesAsync(int? offset, int? limit, string gemeentenaam, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een straatnaam op.</summary>
        /// <param name="objectId">Identificator van de straatnaam.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de straatnaam gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StreetNameResponse> GetStreetNameAsync(int objectId, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een straatnaam op.</summary>
        /// <param name="objectId">Identificator van de straatnaam.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de straatnaam gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StreetNameResponse> GetStreetNameAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met straatnamen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de straatnamen (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met straatnamen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StreetNameListResponse> ListStreetNamesAsync(int? offset, int? limit, string gemeentenaam, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met straatnamen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de straatnamen (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met straatnamen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StreetNameListResponse> ListStreetNamesAsync(int? offset, int? limit, string gemeentenaam, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Voer een adres match vraag uit en krijg de adressen die gematcht worden.</summary>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de adressen.</param>
        /// <param name="niscode">Filter op de NisCode van de gemeente.</param>
        /// <param name="postcode">Filter op de postcode van het adres.</param>
        /// <param name="kadStraatcode">Filter op de straatcode van het kadaster.</param>
        /// <param name="rrStraatcode">Filter op de straatcode van het rijksregister.</param>
        /// <param name="straatnaam">Filter op de straatnaam van het adres.</param>
        /// <param name="huisnummer">Filter op het huisnummer van het adres.</param>
        /// <param name="index">Filter op het huisnummer gekend in het rijksregister.</param>
        /// <param name="busnummer">Filter op het busnummer van het adres.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddressMatchCollection> AddressMatchAsync(string gemeentenaam, string niscode, string postcode, string kadStraatcode, string rrStraatcode, string straatnaam, string huisnummer, string index, string busnummer);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Voer een adres match vraag uit en krijg de adressen die gematcht worden.</summary>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de adressen.</param>
        /// <param name="niscode">Filter op de NisCode van de gemeente.</param>
        /// <param name="postcode">Filter op de postcode van het adres.</param>
        /// <param name="kadStraatcode">Filter op de straatcode van het kadaster.</param>
        /// <param name="rrStraatcode">Filter op de straatcode van het rijksregister.</param>
        /// <param name="straatnaam">Filter op de straatnaam van het adres.</param>
        /// <param name="huisnummer">Filter op het huisnummer van het adres.</param>
        /// <param name="index">Filter op het huisnummer gekend in het rijksregister.</param>
        /// <param name="busnummer">Filter op het busnummer van het adres.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddressMatchCollection> AddressMatchAsync(string gemeentenaam, string niscode, string postcode, string kadStraatcode, string rrStraatcode, string straatnaam, string huisnummer, string index, string busnummer, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een adres op.</summary>
        /// <param name="objectId">Objectidentificator van het adres.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het adres gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddressResponse> GetAddressAsync(int objectId, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een adres op.</summary>
        /// <param name="objectId">Objectidentificator van het adres.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het adres gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddressResponse> GetAddressAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de adressen (exact).</param>
        /// <param name="postcode">Filter op de postcode van het adres (exact).</param>
        /// <param name="straatnaam">Filter op de straatnaam van het adres (exact).</param>
        /// <param name="homoniemToevoeging">Filter op de homoniem toevoeging van het adres (exact).</param>
        /// <param name="huisnummer">Filter op het huisnummer van het adres (exact).</param>
        /// <param name="busnummer">Filter op het busnummer van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddressListResponse> ListAddressesAsync(int? offset, int? limit, string gemeentenaam, int? postcode, string straatnaam, string homoniemToevoeging, string huisnummer, string busnummer, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de adressen (exact).</param>
        /// <param name="postcode">Filter op de postcode van het adres (exact).</param>
        /// <param name="straatnaam">Filter op de straatnaam van het adres (exact).</param>
        /// <param name="homoniemToevoeging">Filter op de homoniem toevoeging van het adres (exact).</param>
        /// <param name="huisnummer">Filter op het huisnummer van het adres (exact).</param>
        /// <param name="busnummer">Filter op het busnummer van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddressListResponse> ListAddressesAsync(int? offset, int? limit, string gemeentenaam, int? postcode, string straatnaam, string homoniemToevoeging, string huisnummer, string busnummer, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een gebouw op.</summary>
        /// <param name="objectId">Identificator van het gebouw.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het gebouw gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingResponse> GetBuildingAsync(int objectId, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een gebouw op.</summary>
        /// <param name="objectId">Identificator van het gebouw.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het gebouw gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingResponse> GetBuildingAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag de referenties van een gebouw op.</summary>
        /// <param name="objectId">Identificator van het gebouw.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>De referenties van het gebouw.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingReferencesResponse> GetBuildingReferencesAsync(int objectId, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag de referenties van een gebouw op.</summary>
        /// <param name="objectId">Identificator van het gebouw.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>De referenties van het gebouw.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingReferencesResponse> GetBuildingReferencesAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met gebouwen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingListResponse> ListBuildingsAsync(int? offset, int? limit, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met gebouwen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingListResponse> ListBuildingsAsync(int? offset, int? limit, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een gebouweenheid op.</summary>
        /// <param name="objectId">Identificator van de gebouweenheid.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de gebouweenheid gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingUnitResponse> GetBuildingUnitAsync(int objectId, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een gebouweenheid op.</summary>
        /// <param name="objectId">Identificator van de gebouweenheid.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de gebouweenheid gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingUnitResponse> GetBuildingUnitAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met gebouweenheden op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="adresObjectId">Optionele objectidentificator van het gekoppelde adres.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouweenheden gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingUnitListResponse> ListBuildingUnitsAsync(int? offset, int? limit, int? adresObjectId, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met gebouweenheden op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="adresObjectId">Optionele objectidentificator van het gekoppelde adres.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouweenheden gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingUnitListResponse> ListBuildingUnitsAsync(int? offset, int? limit, int? adresObjectId, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een perceel op.</summary>
        /// <param name="objectId">Objectidentificator van het perceel (CaPaKey waarbij forward slash `/` vervangen werd door koppelteken `-`).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het perceel gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParcelResponse> GetParcelAsync(string objectId, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een perceel op.</summary>
        /// <param name="objectId">Objectidentificator van het perceel (CaPaKey waarbij forward slash `/` vervangen werd door koppelteken `-`).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het perceel gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParcelResponse> GetParcelAsync(string objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met percelen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met percelen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParcelListResponse> ListParcelsAsync(int? offset, int? limit, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met percelen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met percelen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParcelListResponse> ListParcelsAsync(int? offset, int? limit, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met wijzigingen op adressen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetAddressesFeedAsync(long? from, int? limit, string embed, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op adressen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetAddressesFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met wijzigingen op gebouwen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildingsFeedAsync(long? from, int? limit, string embed, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op gebouwen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetBuildingsFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met wijzigingen op gemeenten op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gemeenten gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetMunicipalitiesFeedAsync(long? from, int? limit, string embed, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op gemeenten op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gemeenten gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetMunicipalitiesFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met wijzigingen op percelen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met percelen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetParcelsFeedAsync(long? from, int? limit, string embed, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op percelen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met percelen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetParcelsFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met wijzigingen op postinfo op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met postinfo gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetPostalCodesFeedAsync(long? from, int? limit, string embed, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op postinfo op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met postinfo gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetPostalCodesFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met wijzigingen op straatnamen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met straatnamen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetStreetNamesFeedAsync(long? from, int? limit, string embed, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op straatnamen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met straatnamen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetStreetNamesFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="objectId">Filter op de CRAB-HuisnummerId van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CrabHouseNumberAddressListResponse> ListCrabHouseNumbersAsync(int? offset, int? limit, int? objectId, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="objectId">Filter op de CRAB-HuisnummerId van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CrabHouseNumberAddressListResponse> ListCrabHouseNumbersAsync(int? offset, int? limit, int? objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="objectId">Filter op de CRAB-SubadresId van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CrabSubAddressListResponse> ListCrabSubaddressesAsync(int? offset, int? limit, int? objectId, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="objectId">Filter op de CRAB-SubadresId van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CrabSubAddressListResponse> ListCrabSubaddressesAsync(int? offset, int? limit, int? objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Vraag een lijst met CRAB-gebouwen op die voldoen aan de filterparameters.</summary>
        /// <param name="terreinObjectId">Filter op de CRAB-TerreinObjectId van het gebouw (exact).</param>
        /// <param name="identificatorTerreinObject">Filter op het CRAB-IdentificatorTerreinObject van het gebouw (exact).&lt;br /&gt;
        /// (= OIDN van de corresponderende GRB-gebouwgeometrie)&lt;br /&gt;
        /// (= enige identificator waarmee in Lara op gebouw kan gezocht worden)</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met CRAB-gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingCrabMappingResponse> ListCrabBuildingsAsync(int? terreinObjectId, string identificatorTerreinObject, string if_None_Match);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met CRAB-gebouwen op die voldoen aan de filterparameters.</summary>
        /// <param name="terreinObjectId">Filter op de CRAB-TerreinObjectId van het gebouw (exact).</param>
        /// <param name="identificatorTerreinObject">Filter op het CRAB-IdentificatorTerreinObject van het gebouw (exact).&lt;br /&gt;
        /// (= OIDN van de corresponderende GRB-gebouwgeometrie)&lt;br /&gt;
        /// (= enige identificator waarmee in Lara op gebouw kan gezocht worden)</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met CRAB-gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BuildingCrabMappingResponse> ListCrabBuildingsAsync(int? terreinObjectId, string identificatorTerreinObject, string if_None_Match, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BasisRegisterService : IBasisRegisterService
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public BasisRegisterService(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Vraag een gemeente op.</summary>
        /// <param name="objectId">Identificator van de gemeente.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de gemeente gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MunicipalityResponse> GetMunicipalityAsync(int objectId, string if_None_Match)
        {
            return GetMunicipalityAsync(objectId, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een gemeente op.</summary>
        /// <param name="objectId">Identificator van de gemeente.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de gemeente gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MunicipalityResponse> GetMunicipalityAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/gemeenten/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MunicipalityResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de gemeente niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als de gemeente niet gevonden kan worden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(MunicipalityResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met gemeenten op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gemeenten gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MunicipalityListResponse> ListMunicipalitiesAsync(int? offset, int? limit, string if_None_Match)
        {
            return ListMunicipalitiesAsync(offset, limit, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met gemeenten op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gemeenten gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MunicipalityListResponse> ListMunicipalitiesAsync(int? offset, int? limit, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/gemeenten?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MunicipalityListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(MunicipalityListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag postinfo voor een postcode op.</summary>
        /// <param name="objectId">Identificator van de postinfo.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de postinfo voor een postcode gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PostalInformationResponse> GetPostalCodeAsync(string objectId, string if_None_Match)
        {
            return GetPostalCodeAsync(objectId, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag postinfo voor een postcode op.</summary>
        /// <param name="objectId">Identificator van de postinfo.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de postinfo voor een postcode gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PostalInformationResponse> GetPostalCodeAsync(string objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/postinfo/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PostalInformationResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de postinfo voor een postcode niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als de postinfo voor een postcode niet gevonden kan worden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PostalInformationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met postinfo over postcodes op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de postcodes (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met postinfo over postcodes gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PostalInformationListResponse> ListPostalCodesAsync(int? offset, int? limit, string gemeentenaam, string if_None_Match)
        {
            return ListPostalCodesAsync(offset, limit, gemeentenaam, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met postinfo over postcodes op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de postcodes (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met postinfo over postcodes gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PostalInformationListResponse> ListPostalCodesAsync(int? offset, int? limit, string gemeentenaam, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/postinfo?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (gemeentenaam != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("gemeentenaam") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gemeentenaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PostalInformationListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PostalInformationListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een straatnaam op.</summary>
        /// <param name="objectId">Identificator van de straatnaam.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de straatnaam gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StreetNameResponse> GetStreetNameAsync(int objectId, string if_None_Match)
        {
            return GetStreetNameAsync(objectId, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een straatnaam op.</summary>
        /// <param name="objectId">Identificator van de straatnaam.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de straatnaam gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StreetNameResponse> GetStreetNameAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/straatnamen/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StreetNameResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de straatnaam niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als de straatnaam niet gevonden kan worden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als de straatnaam verwijderd is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(StreetNameResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met straatnamen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de straatnamen (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met straatnamen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StreetNameListResponse> ListStreetNamesAsync(int? offset, int? limit, string gemeentenaam, string if_None_Match)
        {
            return ListStreetNamesAsync(offset, limit, gemeentenaam, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met straatnamen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de straatnamen (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met straatnamen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StreetNameListResponse> ListStreetNamesAsync(int? offset, int? limit, string gemeentenaam, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/straatnamen?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (gemeentenaam != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("gemeentenaam") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gemeentenaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StreetNameListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(StreetNameListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Voer een adres match vraag uit en krijg de adressen die gematcht worden.</summary>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de adressen.</param>
        /// <param name="niscode">Filter op de NisCode van de gemeente.</param>
        /// <param name="postcode">Filter op de postcode van het adres.</param>
        /// <param name="kadStraatcode">Filter op de straatcode van het kadaster.</param>
        /// <param name="rrStraatcode">Filter op de straatcode van het rijksregister.</param>
        /// <param name="straatnaam">Filter op de straatnaam van het adres.</param>
        /// <param name="huisnummer">Filter op het huisnummer van het adres.</param>
        /// <param name="index">Filter op het huisnummer gekend in het rijksregister.</param>
        /// <param name="busnummer">Filter op het busnummer van het adres.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AddressMatchCollection> AddressMatchAsync(string gemeentenaam, string niscode, string postcode, string kadStraatcode, string rrStraatcode, string straatnaam, string huisnummer, string index, string busnummer)
        {
            return AddressMatchAsync(gemeentenaam, niscode, postcode, kadStraatcode, rrStraatcode, straatnaam, huisnummer, index, busnummer, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Voer een adres match vraag uit en krijg de adressen die gematcht worden.</summary>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de adressen.</param>
        /// <param name="niscode">Filter op de NisCode van de gemeente.</param>
        /// <param name="postcode">Filter op de postcode van het adres.</param>
        /// <param name="kadStraatcode">Filter op de straatcode van het kadaster.</param>
        /// <param name="rrStraatcode">Filter op de straatcode van het rijksregister.</param>
        /// <param name="straatnaam">Filter op de straatnaam van het adres.</param>
        /// <param name="huisnummer">Filter op het huisnummer van het adres.</param>
        /// <param name="index">Filter op het huisnummer gekend in het rijksregister.</param>
        /// <param name="busnummer">Filter op het busnummer van het adres.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AddressMatchCollection> AddressMatchAsync(string gemeentenaam, string niscode, string postcode, string kadStraatcode, string rrStraatcode, string straatnaam, string huisnummer, string index, string busnummer, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/adresmatch?");
            if (gemeentenaam != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("gemeentenaam") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gemeentenaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (niscode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("niscode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(niscode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postcode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postcode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postcode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kadStraatcode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("kadStraatcode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kadStraatcode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rrStraatcode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("rrStraatcode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rrStraatcode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (straatnaam != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("straatnaam") + "=").Append(System.Uri.EscapeDataString(ConvertToString(straatnaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (huisnummer != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("huisnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(huisnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (index != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (busnummer != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("busnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(busnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddressMatchCollection>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AddressMatchCollection);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een adres op.</summary>
        /// <param name="objectId">Objectidentificator van het adres.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het adres gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AddressResponse> GetAddressAsync(int objectId, string if_None_Match)
        {
            return GetAddressAsync(objectId, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een adres op.</summary>
        /// <param name="objectId">Objectidentificator van het adres.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het adres gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AddressResponse> GetAddressAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/adressen/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddressResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als het adres niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het adres niet gevonden kan worden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het adres verwijderd is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AddressResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de adressen (exact).</param>
        /// <param name="postcode">Filter op de postcode van het adres (exact).</param>
        /// <param name="straatnaam">Filter op de straatnaam van het adres (exact).</param>
        /// <param name="homoniemToevoeging">Filter op de homoniem toevoeging van het adres (exact).</param>
        /// <param name="huisnummer">Filter op het huisnummer van het adres (exact).</param>
        /// <param name="busnummer">Filter op het busnummer van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AddressListResponse> ListAddressesAsync(int? offset, int? limit, string gemeentenaam, int? postcode, string straatnaam, string homoniemToevoeging, string huisnummer, string busnummer, string if_None_Match)
        {
            return ListAddressesAsync(offset, limit, gemeentenaam, postcode, straatnaam, homoniemToevoeging, huisnummer, busnummer, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="gemeentenaam">De gerelateerde gemeentenaam van de adressen (exact).</param>
        /// <param name="postcode">Filter op de postcode van het adres (exact).</param>
        /// <param name="straatnaam">Filter op de straatnaam van het adres (exact).</param>
        /// <param name="homoniemToevoeging">Filter op de homoniem toevoeging van het adres (exact).</param>
        /// <param name="huisnummer">Filter op het huisnummer van het adres (exact).</param>
        /// <param name="busnummer">Filter op het busnummer van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AddressListResponse> ListAddressesAsync(int? offset, int? limit, string gemeentenaam, int? postcode, string straatnaam, string homoniemToevoeging, string huisnummer, string busnummer, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/adressen?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (gemeentenaam != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("gemeentenaam") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gemeentenaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (postcode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("postcode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(postcode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (straatnaam != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("straatnaam") + "=").Append(System.Uri.EscapeDataString(ConvertToString(straatnaam, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (homoniemToevoeging != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("homoniemToevoeging") + "=").Append(System.Uri.EscapeDataString(ConvertToString(homoniemToevoeging, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (huisnummer != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("huisnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(huisnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (busnummer != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("busnummer") + "=").Append(System.Uri.EscapeDataString(ConvertToString(busnummer, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddressListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AddressListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een gebouw op.</summary>
        /// <param name="objectId">Identificator van het gebouw.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het gebouw gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BuildingResponse> GetBuildingAsync(int objectId, string if_None_Match)
        {
            return GetBuildingAsync(objectId, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een gebouw op.</summary>
        /// <param name="objectId">Identificator van het gebouw.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het gebouw gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BuildingResponse> GetBuildingAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/gebouwen/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BuildingResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als het gebouw niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gebouw niet gevonden kan worden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gebouw verwijderd is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BuildingResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag de referenties van een gebouw op.</summary>
        /// <param name="objectId">Identificator van het gebouw.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>De referenties van het gebouw.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BuildingReferencesResponse> GetBuildingReferencesAsync(int objectId, string if_None_Match)
        {
            return GetBuildingReferencesAsync(objectId, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag de referenties van een gebouw op.</summary>
        /// <param name="objectId">Identificator van het gebouw.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>De referenties van het gebouw.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BuildingReferencesResponse> GetBuildingReferencesAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/gebouwen/{objectId}/referenties");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BuildingReferencesResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de gebouw referenties niet gewijzigd zijn ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gebouw niet gevonden kan worden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gebouw verwijderd is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BuildingReferencesResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met gebouwen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BuildingListResponse> ListBuildingsAsync(int? offset, int? limit, string if_None_Match)
        {
            return ListBuildingsAsync(offset, limit, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met gebouwen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BuildingListResponse> ListBuildingsAsync(int? offset, int? limit, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/gebouwen?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BuildingListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BuildingListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een gebouweenheid op.</summary>
        /// <param name="objectId">Identificator van de gebouweenheid.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de gebouweenheid gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BuildingUnitResponse> GetBuildingUnitAsync(int objectId, string if_None_Match)
        {
            return GetBuildingUnitAsync(objectId, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een gebouweenheid op.</summary>
        /// <param name="objectId">Identificator van de gebouweenheid.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de gebouweenheid gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BuildingUnitResponse> GetBuildingUnitAsync(int objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            if (objectId == null)
                throw new System.ArgumentNullException("objectId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/gebouweenheden/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BuildingUnitResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de gebouweenheid niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als de gebouweenheid niet gevonden kan worden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als de gebouweenheid verwijderd is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BuildingUnitResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met gebouweenheden op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="adresObjectId">Optionele objectidentificator van het gekoppelde adres.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouweenheden gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BuildingUnitListResponse> ListBuildingUnitsAsync(int? offset, int? limit, int? adresObjectId, string if_None_Match)
        {
            return ListBuildingUnitsAsync(offset, limit, adresObjectId, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met gebouweenheden op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="adresObjectId">Optionele objectidentificator van het gekoppelde adres.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouweenheden gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BuildingUnitListResponse> ListBuildingUnitsAsync(int? offset, int? limit, int? adresObjectId, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/gebouweenheden?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (adresObjectId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("adresObjectId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(adresObjectId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BuildingUnitListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BuildingUnitListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een perceel op.</summary>
        /// <param name="objectId">Objectidentificator van het perceel (CaPaKey waarbij forward slash `/` vervangen werd door koppelteken `-`).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het perceel gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParcelResponse> GetParcelAsync(string objectId, string if_None_Match)
        {
            return GetParcelAsync(objectId, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een perceel op.</summary>
        /// <param name="objectId">Objectidentificator van het perceel (CaPaKey waarbij forward slash `/` vervangen werd door koppelteken `-`).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als het perceel gevonden is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ParcelResponse> GetParcelAsync(string objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/percelen/{objectId}");
            urlBuilder_.Replace("{objectId}", System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ParcelResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als het perceel niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het perceel niet gevonden kan worden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "410") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het perceel verwijderd is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParcelResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met percelen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met percelen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParcelListResponse> ListParcelsAsync(int? offset, int? limit, string if_None_Match)
        {
            return ListParcelsAsync(offset, limit, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met percelen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met percelen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ParcelListResponse> ListParcelsAsync(int? offset, int? limit, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/percelen?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ParcelListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ParcelListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met wijzigingen op adressen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetAddressesFeedAsync(long? from, int? limit, string embed, string if_None_Match)
        {
            return GetAddressesFeedAsync(from, limit, embed, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op adressen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetAddressesFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/feeds/adressen?");
            if (from != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (embed != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("embed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(embed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/atom+xml"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met wijzigingen op gebouwen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetBuildingsFeedAsync(long? from, int? limit, string embed, string if_None_Match)
        {
            return GetBuildingsFeedAsync(from, limit, embed, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op gebouwen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetBuildingsFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/feeds/gebouwen?");
            if (from != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (embed != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("embed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(embed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/atom+xml"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met wijzigingen op gemeenten op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gemeenten gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetMunicipalitiesFeedAsync(long? from, int? limit, string embed, string if_None_Match)
        {
            return GetMunicipalitiesFeedAsync(from, limit, embed, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op gemeenten op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met gemeenten gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetMunicipalitiesFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/feeds/gemeenten?");
            if (from != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (embed != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("embed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(embed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/atom+xml"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met wijzigingen op percelen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met percelen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetParcelsFeedAsync(long? from, int? limit, string embed, string if_None_Match)
        {
            return GetParcelsFeedAsync(from, limit, embed, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op percelen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met percelen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetParcelsFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/feeds/percelen?");
            if (from != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (embed != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("embed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(embed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/atom+xml"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met wijzigingen op postinfo op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met postinfo gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetPostalCodesFeedAsync(long? from, int? limit, string embed, string if_None_Match)
        {
            return GetPostalCodesFeedAsync(from, limit, embed, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op postinfo op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met postinfo gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetPostalCodesFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/feeds/postinfo?");
            if (from != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (embed != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("embed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(embed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/atom+xml"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met wijzigingen op straatnamen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met straatnamen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<string> GetStreetNamesFeedAsync(long? from, int? limit, string embed, string if_None_Match)
        {
            return GetStreetNamesFeedAsync(from, limit, embed, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met wijzigingen op straatnamen op in het Atom formaat.</summary>
        /// <param name="from">Eventidentificator (volgnummer) vanaf waar de feed moet gestart of hernomen worden.</param>
        /// <param name="limit">Maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="embed">Keuze welke info in het &amp;lt;Content&amp;gt;-gedeelte van de output moet zitten. ("event", "object", "event/object")</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met straatnamen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<string> GetStreetNamesFeedAsync(long? from, int? limit, string embed, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/feeds/straatnamen?");
            if (from != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (embed != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("embed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(embed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/atom+xml"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(string);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="objectId">Filter op de CRAB-HuisnummerId van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CrabHouseNumberAddressListResponse> ListCrabHouseNumbersAsync(int? offset, int? limit, int? objectId, string if_None_Match)
        {
            return ListCrabHouseNumbersAsync(offset, limit, objectId, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="objectId">Filter op de CRAB-HuisnummerId van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CrabHouseNumberAddressListResponse> ListCrabHouseNumbersAsync(int? offset, int? limit, int? objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/crabhuisnummers?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (objectId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("objectId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrabHouseNumberAddressListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CrabHouseNumberAddressListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="objectId">Filter op de CRAB-SubadresId van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CrabSubAddressListResponse> ListCrabSubaddressesAsync(int? offset, int? limit, int? objectId, string if_None_Match)
        {
            return ListCrabSubaddressesAsync(offset, limit, objectId, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met adressen op.</summary>
        /// <param name="offset">Optionele nulgebaseerde index van de eerste instantie die teruggegeven wordt.</param>
        /// <param name="limit">Optioneel maximaal aantal instanties dat teruggegeven wordt.</param>
        /// <param name="objectId">Filter op de CRAB-SubadresId van het adres (exact).</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met adressen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CrabSubAddressListResponse> ListCrabSubaddressesAsync(int? offset, int? limit, int? objectId, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/crabsubadressen?");
            if (offset != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (limit != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (objectId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("objectId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(objectId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CrabSubAddressListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CrabSubAddressListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Vraag een lijst met CRAB-gebouwen op die voldoen aan de filterparameters.</summary>
        /// <param name="terreinObjectId">Filter op de CRAB-TerreinObjectId van het gebouw (exact).</param>
        /// <param name="identificatorTerreinObject">Filter op het CRAB-IdentificatorTerreinObject van het gebouw (exact).&lt;br /&gt;
        /// (= OIDN van de corresponderende GRB-gebouwgeometrie)&lt;br /&gt;
        /// (= enige identificator waarmee in Lara op gebouw kan gezocht worden)</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met CRAB-gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BuildingCrabMappingResponse> ListCrabBuildingsAsync(int? terreinObjectId, string identificatorTerreinObject, string if_None_Match)
        {
            return ListCrabBuildingsAsync(terreinObjectId, identificatorTerreinObject, if_None_Match, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Vraag een lijst met CRAB-gebouwen op die voldoen aan de filterparameters.</summary>
        /// <param name="terreinObjectId">Filter op de CRAB-TerreinObjectId van het gebouw (exact).</param>
        /// <param name="identificatorTerreinObject">Filter op het CRAB-IdentificatorTerreinObject van het gebouw (exact).&lt;br /&gt;
        /// (= OIDN van de corresponderende GRB-gebouwgeometrie)&lt;br /&gt;
        /// (= enige identificator waarmee in Lara op gebouw kan gezocht worden)</param>
        /// <param name="if_None_Match">Optionele If-None-Match header met ETag van een vorig verzoek.</param>
        /// <returns>Als de opvraging van een lijst met CRAB-gebouwen gelukt is.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BuildingCrabMappingResponse> ListCrabBuildingsAsync(int? terreinObjectId, string identificatorTerreinObject, string if_None_Match, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/crabgebouwen?");
            if (terreinObjectId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("terreinObjectId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(terreinObjectId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (identificatorTerreinObject != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("identificatorTerreinObject") + "=").Append(System.Uri.EscapeDataString(ConvertToString(identificatorTerreinObject, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (if_None_Match != null)
                        request_.Headers.TryAddWithoutValidation("if-None-Match", ConvertToString(if_None_Match, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als er een interne fout is opgetreden.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BuildingCrabMappingResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "304") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Als de lijst niet gewijzigd is ten opzicht van uw verzoek.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als uw verzoek foutieve data bevat.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "406") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<ProblemDetails>("Als het gevraagde formaat niet beschikbaar is.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BuildingCrabMappingResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    /// <summary>Bevat informatie waarmee een gemeente kan geïdentificeerd worden.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GemeenteIdentificator 
    {
        /// <summary>De unieke en persistente identificator van het object (volgt de Vlaamse URI-standaard).</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>De naamruimte waarbinnen objecten van een bepaald objecttype geïdentificeerd worden.</summary>
        [Newtonsoft.Json.JsonProperty("naamruimte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naamruimte { get; set; }
    
        /// <summary>De objectidentificator (enkel uniek binnen naamruimte).</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De versie-identificator (timestamp volgens RFC 3339) (notatie: lokale tijd + verschil t.o.v. UTC).</summary>
        [Newtonsoft.Json.JsonProperty("versieId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersieId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Taal
    {
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"en")]
        En = 3,
    
    }
    
    /// <summary>De geografische naam.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeografischeNaam 
    {
        /// <summary>De spelling van de geografische naam in de gespecifieerde taal.</summary>
        [Newtonsoft.Json.JsonProperty("spelling", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Spelling { get; set; }
    
        [Newtonsoft.Json.JsonProperty("taal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Taal Taal { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GemeenteStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"inGebruik")]
        InGebruik = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gehistoreerd")]
        Gehistoreerd = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"voorgesteld")]
        Voorgesteld = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MunicipalityResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GemeenteIdentificator Identificator { get; set; }
    
        /// <summary>De officiële talen van de gemeente.</summary>
        [Newtonsoft.Json.JsonProperty("officieleTalen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Taal> OfficieleTalen { get; set; }
    
        /// <summary>De faciliteiten talen van de gemeente.</summary>
        [Newtonsoft.Json.JsonProperty("faciliteitenTalen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Taal> FaciliteitenTalen { get; set; }
    
        /// <summary>De officiële namen van de gemeente.</summary>
        [Newtonsoft.Json.JsonProperty("gemeentenamen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GeografischeNaam> Gemeentenamen { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gemeenteStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GemeenteStatus GemeenteStatus { get; set; }
    
    
    }
    
    /// <summary>Implementation of Problem Details for HTTP APIs https://tools.ietf.org/html/rfc7807</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProblemDetails 
    {
        /// <summary>URI referentie die het probleem type bepaalt.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Korte omschrijving van het probleem.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        /// <summary>Specifieke details voor dit probleem.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        /// <summary>HTTP status code komende van de server voor dit probleem.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }
    
        /// <summary>URI naar de specifieke instantie van dit probleem.</summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }
    
    
    }
    
    /// <summary>De naam van de gemeente in het Nederlands.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Gemeentenaam 
    {
        [Newtonsoft.Json.JsonProperty("geografischeNaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeografischeNaam GeografischeNaam { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MunicipalityListItemResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GemeenteIdentificator Identificator { get; set; }
    
        /// <summary>De URL die naar de details van de meest recente versie van een enkele gemeente leidt.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Gemeentenaam Gemeentenaam { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gemeenteStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GemeenteStatus GemeenteStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MunicipalityListResponse 
    {
        /// <summary>De verzameling van gemeentes.</summary>
        [Newtonsoft.Json.JsonProperty("gemeenten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MunicipalityListItemResponse> Gemeenten { get; set; }
    
        /// <summary>De URL voor het ophalen van de volgende verzameling.</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Volgende { get; set; }
    
    
    }
    
    /// <summary>Bevat informatie waarmee de postinfo kan geïdentificeerd worden.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PostinfoIdentificator 
    {
        /// <summary>De unieke en persistente identificator van het object (volgt de Vlaamse URI-standaard).</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>De naamruimte waarbinnen objecten van een bepaald objecttype geïdentificeerd worden.</summary>
        [Newtonsoft.Json.JsonProperty("naamruimte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naamruimte { get; set; }
    
        /// <summary>De objectidentificator (enkel uniek binnen naamruimte).</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De versie-identificator (timestamp volgens RFC 3339) (notatie: lokale tijd + verschil t.o.v. UTC).</summary>
        [Newtonsoft.Json.JsonProperty("versieId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersieId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Postnaam 
    {
        [Newtonsoft.Json.JsonProperty("geografischeNaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeografischeNaam GeografischeNaam { get; set; }
    
    
    }
    
    /// <summary>De status van het PostInfo object.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PostInfoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gerealiseerd")]
        Gerealiseerd = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gehistoreerd")]
        Gehistoreerd = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PostalInformationResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostinfoIdentificator Identificator { get; set; }
    
        /// <summary>De namen van het gebied dat de postcode beslaat, in meerdere talen.</summary>
        [Newtonsoft.Json.JsonProperty("postnamen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Postnaam> Postnamen { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postInfoStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PostInfoStatus PostInfoStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PostalInformationListItemResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostinfoIdentificator Identificator { get; set; }
    
        /// <summary>De URL die naar de details van de meest recente versie van de postcode leidt.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postInfoStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PostInfoStatus PostInfoStatus { get; set; }
    
        /// <summary>De namen van de gebieden die de postcode beslaat, in het Nederlands.</summary>
        [Newtonsoft.Json.JsonProperty("postnamen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Postnaam> Postnamen { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PostalInformationListResponse 
    {
        /// <summary>De verzameling van postcodes.</summary>
        [Newtonsoft.Json.JsonProperty("postInfoObjecten", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PostalInformationListItemResponse> PostInfoObjecten { get; set; }
    
        /// <summary>De URL voor het ophalen van de volgende verzameling.</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Volgende { get; set; }
    
    
    }
    
    /// <summary>Bevat informatie waarmee de straatnaam kan geïdentificeerd worden.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StraatnaamIdentificator 
    {
        /// <summary>De unieke en persistente identificator van het object (volgt de Vlaamse URI-standaard).</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>De naamruimte waarbinnen objecten van een bepaald objecttype geïdentificeerd worden.</summary>
        [Newtonsoft.Json.JsonProperty("naamruimte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naamruimte { get; set; }
    
        /// <summary>De objectidentificator (enkel uniek binnen naamruimte).</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De versie-identificator (timestamp volgens RFC 3339) (notatie: lokale tijd + verschil t.o.v. UTC).</summary>
        [Newtonsoft.Json.JsonProperty("versieId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersieId { get; set; }
    
    
    }
    
    /// <summary>De gemeente aan dewelke de straatnaam is toegewezen.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StraatnaamDetailGemeente 
    {
        /// <summary>De identifier van de gekoppelde gemeente.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De URL die de details van de meest recente versie van de gekoppelde gemeente weergeeft.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Gemeentenaam Gemeentenaam { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StraatnaamStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"voorgesteld")]
        Voorgesteld = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"inGebruik")]
        InGebruik = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gehistoreerd")]
        Gehistoreerd = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StreetNameResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StraatnaamIdentificator Identificator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gemeente", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StraatnaamDetailGemeente Gemeente { get; set; }
    
        /// <summary>De straatnaam in verschillende talen.</summary>
        [Newtonsoft.Json.JsonProperty("straatnamen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GeografischeNaam> Straatnamen { get; set; }
    
        /// <summary>De homoniem-toevoegingen aan de straatnaam in verschillende talen.</summary>
        [Newtonsoft.Json.JsonProperty("homoniemToevoegingen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GeografischeNaam> HomoniemToevoegingen { get; set; }
    
        [Newtonsoft.Json.JsonProperty("straatnaamStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraatnaamStatus StraatnaamStatus { get; set; }
    
    
    }
    
    /// <summary>De straatnaam in het Nederlands.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Straatnaam 
    {
        [Newtonsoft.Json.JsonProperty("geografischeNaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeografischeNaam GeografischeNaam { get; set; }
    
    
    }
    
    /// <summary>De homoniemtoevoeging in het Nederlands.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HomoniemToevoeging 
    {
        [Newtonsoft.Json.JsonProperty("geografischeNaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeografischeNaam GeografischeNaam { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StreetNameListItemResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StraatnaamIdentificator Identificator { get; set; }
    
        /// <summary>De URL die naar de details van de meeste recente versie van een enkele straatnaam leidt.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Straatnaam Straatnaam { get; set; }
    
        [Newtonsoft.Json.JsonProperty("homoniemToevoeging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomoniemToevoeging HomoniemToevoeging { get; set; }
    
        [Newtonsoft.Json.JsonProperty("straatnaamStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraatnaamStatus StraatnaamStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StreetNameListResponse 
    {
        /// <summary>De verzameling van straatnamen.</summary>
        [Newtonsoft.Json.JsonProperty("straatnamen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StreetNameListItemResponse> Straatnamen { get; set; }
    
        /// <summary>De URL voor het ophalen van de volgende verzameling.</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Volgende { get; set; }
    
    
    }
    
    /// <summary>Bevat informatie waarmee het adres kan geïdentificeerd worden.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdresIdentificator 
    {
        /// <summary>De unieke en persistente identificator van het object (volgt de Vlaamse URI-standaard).</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>De naamruimte waarbinnen objecten van een bepaald objecttype geïdentificeerd worden.</summary>
        [Newtonsoft.Json.JsonProperty("naamruimte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naamruimte { get; set; }
    
        /// <summary>De objectidentificator (enkel uniek binnen naamruimte).</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De versie-identificator (timestamp volgens RFC 3339) (notatie: lokale tijd + verschil t.o.v. UTC).</summary>
        [Newtonsoft.Json.JsonProperty("versieId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersieId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdresMatchItemGemeente 
    {
        /// <summary>De identificator van de gerelateerde gemeente.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>URL waarop de details van de laatste versie van de gerelateerde gemeente gevonden kunnen worden.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Gemeentenaam Gemeentenaam { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdresMatchItemPostinfo 
    {
        /// <summary>De identificator van de gerelateerde postinfo.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>URL waarop de details van de laatste versie van de gerelateerde postinfo gevonden kunnen worden.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdresMatchItemStraatnaam 
    {
        /// <summary>De identificator van de gerelateerde straatnaam.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>URL waarop de details van de laatste versie van de gerelateerde straatnaam gevonden kunnen worden.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Straatnaam Straatnaam { get; set; }
    
    
    }
    
    /// <summary>De voorstelling van een adres in het Nederlands.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class VolledigAdres 
    {
        [Newtonsoft.Json.JsonProperty("geografischeNaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeografischeNaam GeografischeNaam { get; set; }
    
    
    }
    
    /// <summary>Een GeoJSON punt.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeoJSONPoint 
    {
        /// <summary>Coördinaten volgens Lambert-72 (EPSG:31370).</summary>
        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> Coordinates { get; set; }
    
        /// <summary>GeoJSON-geometrietype.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    /// <summary>Een GML3 punt of een GeoJSON punt, afhankelijk van het Content-Type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Point 
    {
        [Newtonsoft.Json.JsonProperty("point", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoJSONPoint Point1 { get; set; }
    
    
    }
    
    /// <summary>De specificatie van het object, voorgesteld door de positie.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PositieSpecificatie
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gemeente")]
        Gemeente = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"straat")]
        Straat = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"perceel")]
        Perceel = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"lot")]
        Lot = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"standplaats")]
        Standplaats = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ligplaats")]
        Ligplaats = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gebouw")]
        Gebouw = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gebouweenheid")]
        Gebouweenheid = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ingang")]
        Ingang = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"wegsegment")]
        Wegsegment = 9,
    
    }
    
    /// <summary>De Geometrie methode van de positie.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PositieGeometrieMethode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"aangeduidDoorBeheerder")]
        AangeduidDoorBeheerder = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"afgeleidVanObject")]
        AfgeleidVanObject = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"geïnterpoleerd")]
        Geïnterpoleerd = 2,
    
    }
    
    /// <summary>De status van een adres.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AdresStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"voorgesteld")]
        Voorgesteld = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"inGebruik")]
        InGebruik = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gehistoreerd")]
        Gehistoreerd = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ObjectType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gebouweenheid")]
        Gebouweenheid = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"perceel")]
        Perceel = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"standplaats")]
        Standplaats = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ligplaats")]
        Ligplaats = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdresseerbaarObject 
    {
        [Newtonsoft.Json.JsonProperty("objectType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ObjectType ObjectType { get; set; }
    
        /// <summary>De identificator van het gerelateerde object.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>URL waarop de details van de laatste versie van het gerelateerde object gevonden kunnen worden.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdresMatchItem 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresIdentificator Identificator { get; set; }
    
        /// <summary>URL waarop de details van de laatste versie van het adres gevonden kunnen worden.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gemeente", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresMatchItemGemeente Gemeente { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postinfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresMatchItemPostinfo Postinfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresMatchItemStraatnaam Straatnaam { get; set; }
    
        [Newtonsoft.Json.JsonProperty("homoniemToevoeging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomoniemToevoeging HomoniemToevoeging { get; set; }
    
        /// <summary>Het huisnummer.</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Huisnummer { get; set; }
    
        /// <summary>Het nummer van de bus.</summary>
        [Newtonsoft.Json.JsonProperty("busnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Busnummer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("volledigAdres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VolledigAdres VolledigAdres { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adresPositie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Point AdresPositie { get; set; }
    
        [Newtonsoft.Json.JsonProperty("positieSpecificatie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PositieSpecificatie PositieSpecificatie { get; set; }
    
        [Newtonsoft.Json.JsonProperty("positieGeometrieMethode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PositieGeometrieMethode PositieGeometrieMethode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adresStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdresStatus AdresStatus { get; set; }
    
        /// <summary>False wanneer het bestaan van het adres niet geweten is ten tijde van administratieve procedures, maar pas na observatie op het terrein.</summary>
        [Newtonsoft.Json.JsonProperty("officieelToegekend", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OfficieelToegekend { get; set; }
    
        /// <summary>Objecten die gekoppeld zijn aan het adres.</summary>
        [Newtonsoft.Json.JsonProperty("adresseerbareObjecten", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdresseerbaarObject> AdresseerbareObjecten { get; set; }
    
        /// <summary>De graad van gelijkenis tussen het gevonden adres en de invoer.</summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double Score { get; set; }
    
    
    }
    
    /// <summary>contains a warning message in dutch and english</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ValidationMessage 
    {
        /// <summary>A code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>A descriptive message. Preferably in Dutch and English</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddressMatchCollection 
    {
        /// <summary>De eerste 10 adres matches.</summary>
        [Newtonsoft.Json.JsonProperty("adresMatches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdresMatchItem> AdresMatches { get; set; }
    
        /// <summary>Bevat waarschuwingen met betrekking tot conflicterende input.</summary>
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValidationMessage> Warnings { get; set; }
    
    
    }
    
    /// <summary>De gemeente die deel uitmaakt van het adres.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdresDetailGemeente 
    {
        /// <summary>De identifier van de gekoppelde gemeente.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De URL die de details van de meest recente versie van de gekoppelde gemeente weergeeft.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gemeentenaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Gemeentenaam Gemeentenaam { get; set; }
    
    
    }
    
    /// <summary>Een PostInfo object dat deel uitmaakt van het adres.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdresDetailPostinfo 
    {
        /// <summary>De identifier van het gekoppelde PostInfo object.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De URL die de details van de meest recente versie van het gekoppelde PostInfo object weergeeft.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
    
    }
    
    /// <summary>Een straatnaam die deel uitmaakt van het adres.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdresDetailStraatnaam 
    {
        /// <summary>De identifier van de gekoppelde straatnaam.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De URL die de details van de meest recente versie van de gekoppelde straatnaam weergeeft.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Straatnaam Straatnaam { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddressResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresIdentificator Identificator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gemeente", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresDetailGemeente Gemeente { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postinfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AdresDetailPostinfo Postinfo { get; set; } = new AdresDetailPostinfo();
    
        [Newtonsoft.Json.JsonProperty("straatnaam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresDetailStraatnaam Straatnaam { get; set; }
    
        [Newtonsoft.Json.JsonProperty("homoniemToevoeging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HomoniemToevoeging HomoniemToevoeging { get; set; }
    
        /// <summary>Het huisnummer.</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Huisnummer { get; set; }
    
        /// <summary>Het nummer van de bus.</summary>
        [Newtonsoft.Json.JsonProperty("busnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Busnummer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("volledigAdres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VolledigAdres VolledigAdres { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adresPositie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Point AdresPositie { get; set; }
    
        [Newtonsoft.Json.JsonProperty("positieGeometrieMethode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PositieGeometrieMethode PositieGeometrieMethode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("positieSpecificatie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PositieSpecificatie PositieSpecificatie { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adresStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdresStatus AdresStatus { get; set; }
    
        /// <summary>False wanneer het bestaan van het adres niet geweten is ten tijde van administratieve procedures, maar pas na observatie op het terrein.</summary>
        [Newtonsoft.Json.JsonProperty("officieelToegekend", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OfficieelToegekend { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddressListItemResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresIdentificator Identificator { get; set; }
    
        /// <summary>De URL die naar de details van de meeste recente versie van een enkel adres leidt.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Detail { get; set; }
    
        /// <summary>Het huisnummer.</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Huisnummer { get; set; }
    
        /// <summary>Het busnummer.</summary>
        [Newtonsoft.Json.JsonProperty("busnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Busnummer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("volledigAdres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VolledigAdres VolledigAdres { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adresStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdresStatus AdresStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AddressListResponse 
    {
        /// <summary>De verzameling van adressen.</summary>
        [Newtonsoft.Json.JsonProperty("adressen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AddressListItemResponse> Adressen { get; set; }
    
        /// <summary>De URL voor het ophalen van de volgende verzameling.</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Volgende { get; set; }
    
    
    }
    
    /// <summary>Bevat informatie waarmee het gebouw kan geïdentificeerd worden.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GebouwIdentificator 
    {
        /// <summary>De unieke en persistente identificator van het object (volgt de Vlaamse URI-standaard).</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>De naamruimte waarbinnen objecten van een bepaald objecttype geïdentificeerd worden.</summary>
        [Newtonsoft.Json.JsonProperty("naamruimte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naamruimte { get; set; }
    
        /// <summary>De objectidentificator (enkel uniek binnen naamruimte).</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De versie-identificator (timestamp volgens RFC 3339) (notatie: lokale tijd + verschil t.o.v. UTC).</summary>
        [Newtonsoft.Json.JsonProperty("versieId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersieId { get; set; }
    
    
    }
    
    /// <summary>Een GeoJSON polygoon.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GeoJSONPolygon 
    {
        /// <summary>Coördinaten volgens Lambert-72 (EPSG:31370).</summary>
        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>>> Coordinates { get; set; }
    
        /// <summary>GeoJSON-geometrietype.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    /// <summary>Een GML3 punt of een GeoJSON punt, afhankelijk van het Content-Type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Polygon 
    {
        [Newtonsoft.Json.JsonProperty("polygon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoJSONPolygon Polygon1 { get; set; }
    
    
    }
    
    /// <summary>De methode waarop de geometrie is verworven.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GeometrieMethode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ingemetenGRB")]
        IngemetenGRB = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ingeschetst")]
        Ingeschetst = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ingemeten")]
        Ingemeten = 2,
    
    }
    
    /// <summary>De status van een gebouw.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GebouwStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gepland")]
        Gepland = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"inAanbouw")]
        InAanbouw = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gerealiseerd")]
        Gerealiseerd = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gehistoreerd")]
        Gehistoreerd = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nietGerealiseerd")]
        NietGerealiseerd = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GebouwDetailGebouweenheid 
    {
        /// <summary>De identifier van de gekoppelde gebouweenheid.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De URL die de details van de meest recente versie van de gekoppelde gebouweenheid weergeeft.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GebouwDetailPerceel 
    {
        /// <summary>De identifier van het gekoppelde perceel.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De URL die de details van de meest recente versie van het gekoppelde perceel weergeeft.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BuildingResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GebouwIdentificator Identificator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometriePolygoon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Polygon GeometriePolygoon { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometrieMethode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GeometrieMethode GeometrieMethode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gebouwStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GebouwStatus GebouwStatus { get; set; }
    
        /// <summary>a collection of building units that reside within the building</summary>
        [Newtonsoft.Json.JsonProperty("gebouweenheden", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GebouwDetailGebouweenheid> Gebouweenheden { get; set; }
    
        /// <summary>a collection of parcels that lie underneath the building</summary>
        [Newtonsoft.Json.JsonProperty("percelen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GebouwDetailPerceel> Percelen { get; set; }
    
    
    }
    
    /// <summary>De referenties van CRAB.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CrabReferences 
    {
        /// <summary>De CRAB-TerreinObjectId.</summary>
        [Newtonsoft.Json.JsonProperty("terreinObjectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TerreinObjectId { get; set; }
    
        /// <summary>Het CRAB-IdentificatorTerreinObject. &lt;br /&gt;
        /// (= OIDN van de corresponderende GRB-gebouwgeometrie) &lt;br /&gt;
        /// (= enige identificator waarmee in Lara op gebouw kan gezocht worden)</summary>
        [Newtonsoft.Json.JsonProperty("identificatorTerreinObject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificatorTerreinObject { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BuildingReferencesResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GebouwIdentificator Identificator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("crab", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CrabReferences Crab { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GebouwCollectieItem 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GebouwIdentificator Identificator { get; set; }
    
        /// <summary>De URL die naar de details van de meeste recente versie van een enkele gebouw leidt.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gebouwStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GebouwStatus GebouwStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BuildingListResponse 
    {
        /// <summary>Collectie van gebouwen</summary>
        [Newtonsoft.Json.JsonProperty("gebouwen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GebouwCollectieItem> Gebouwen { get; set; }
    
        /// <summary>De URL voor het ophalen van de volgende verzameling.</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Volgende { get; set; }
    
    
    }
    
    /// <summary>Bevat informatie waarmee de gebouweenheid kan geïdentificeerd worden.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GebouweenheidIdentificator 
    {
        /// <summary>De unieke en persistente identificator van het object (volgt de Vlaamse URI-standaard).</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>De naamruimte waarbinnen objecten van een bepaald objecttype geïdentificeerd worden.</summary>
        [Newtonsoft.Json.JsonProperty("naamruimte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naamruimte { get; set; }
    
        /// <summary>De objectidentificator (enkel uniek binnen naamruimte).</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De versie-identificator (timestamp volgens RFC 3339) (notatie: lokale tijd + verschil t.o.v. UTC).</summary>
        [Newtonsoft.Json.JsonProperty("versieId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersieId { get; set; }
    
    
    }
    
    /// <summary>De status van een gebouweenheid.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GebouweenheidStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gepland")]
        Gepland = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gerealiseerd")]
        Gerealiseerd = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gehistoreerd")]
        Gehistoreerd = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nietGerealiseerd")]
        NietGerealiseerd = 3,
    
    }
    
    /// <summary>De functie van de gebouweenheid in realiteit.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum GebouweenheidFunctie
    {
        [System.Runtime.Serialization.EnumMember(Value = @"nietGekend")]
        NietGekend = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gemeenschappelijkDeel")]
        GemeenschappelijkDeel = 1,
    
    }
    
    /// <summary>Het gebouw waartoe de gebouweenheid behoort.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GebouweenheidDetailGebouw 
    {
        /// <summary>De identifier van het gekoppelde gebouw.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De URL die de details van de meest recente versie van het gekoppelde gebouw weergeeft.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
    
    }
    
    /// <summary>Het adres van de gebouweenheid.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GebouweenheidDetailAdres 
    {
        /// <summary>De identifier van het gekoppelde adres.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De URL die de details van de meest recente versie van het gekoppelde adres weergeeft.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Detail { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BuildingUnitResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GebouweenheidIdentificator Identificator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("geometriePunt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Point GeometriePunt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("positieGeometrieMethode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PositieGeometrieMethode PositieGeometrieMethode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gebouweenheidStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GebouweenheidStatus GebouweenheidStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("functie", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GebouweenheidFunctie Functie { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gebouw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GebouweenheidDetailGebouw Gebouw { get; set; }
    
        /// <summary>De aan de gebouweenheid gelinkte adressen.</summary>
        [Newtonsoft.Json.JsonProperty("adressen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GebouweenheidDetailAdres> Adressen { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GebouweenheidCollectieItem 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GebouweenheidIdentificator Identificator { get; set; }
    
        /// <summary>De URL die naar de details van de meeste recente versie van een enkele gebouweenheid leidt.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gebouweenheidStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GebouweenheidStatus GebouweenheidStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BuildingUnitListResponse 
    {
        /// <summary>Collectie van gebouweenheden.</summary>
        [Newtonsoft.Json.JsonProperty("gebouweenheden", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GebouweenheidCollectieItem> Gebouweenheden { get; set; }
    
        /// <summary>De URL voor het ophalen van de volgende verzameling.</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Volgende { get; set; }
    
    
    }
    
    /// <summary>Bevat informatie waarmee het perceel kan geïdentificeerd worden.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PerceelIdentificator 
    {
        /// <summary>De unieke en persistente identificator van het object (volgt de Vlaamse URI-standaard).</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>De naamruimte waarbinnen objecten van een bepaald objecttype geïdentificeerd worden.</summary>
        [Newtonsoft.Json.JsonProperty("naamruimte", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Naamruimte { get; set; }
    
        /// <summary>De objectidentificator (enkel uniek binnen naamruimte).</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De versie-identificator (timestamp volgens RFC 3339) (notatie: lokale tijd + verschil t.o.v. UTC).</summary>
        [Newtonsoft.Json.JsonProperty("versieId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersieId { get; set; }
    
    
    }
    
    /// <summary>De status van een perceel.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PerceelStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"gerealiseerd")]
        Gerealiseerd = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"gehistoreerd")]
        Gehistoreerd = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PerceelDetailAdres 
    {
        /// <summary>De identifier van het gekoppelde adres.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
        /// <summary>De URL die de details van de meest recente versie van het gekoppelde adres weergeeft.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Detail { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParcelResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerceelIdentificator Identificator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("perceelStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PerceelStatus PerceelStatus { get; set; }
    
        /// <summary>De aan het perceel gelinkte adressen</summary>
        [Newtonsoft.Json.JsonProperty("adressen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PerceelDetailAdres> Adressen { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParcelListItemResponse 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerceelIdentificator Identificator { get; set; }
    
        /// <summary>De URL die naar de details van de meest recente versie van een enkel perceel leidt.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Detail { get; set; }
    
        [Newtonsoft.Json.JsonProperty("perceelStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PerceelStatus PerceelStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParcelListResponse 
    {
        /// <summary>De verzameling van percelen.</summary>
        [Newtonsoft.Json.JsonProperty("percelen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParcelListItemResponse> Percelen { get; set; }
    
        /// <summary>De URL voor het ophalen van de volgende verzameling.</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Volgende { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CrabAddressListItemAddress 
    {
        /// <summary>True als het adres volledig is (heeft status en positie).</summary>
        [Newtonsoft.Json.JsonProperty("isVolledig", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsVolledig { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdresIdentificator Identificator { get; set; }
    
        /// <summary>De URL die naar de details van de meeste recente versie van een enkele straatnaam leidt.</summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Detail { get; set; }
    
        /// <summary>Het huisnummer.</summary>
        [Newtonsoft.Json.JsonProperty("huisnummer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Huisnummer { get; set; }
    
        /// <summary>Het nummer van de bus.</summary>
        [Newtonsoft.Json.JsonProperty("busnummer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Busnummer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("volledigAdres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VolledigAdres VolledigAdres { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CrabHouseNumberAddressListItem 
    {
        /// <summary>De CRAB-HuisnummerId.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ObjectId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CrabAddressListItemAddress Adres { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CrabHouseNumberAddressListResponse 
    {
        /// <summary>De verzameling van adressen.</summary>
        [Newtonsoft.Json.JsonProperty("crabHuisnummers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrabHouseNumberAddressListItem> CrabHuisnummers { get; set; }
    
        /// <summary>De URL voor het ophalen van de volgende verzameling.</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Volgende { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CrabSubAddressListItem 
    {
        /// <summary>De CRAB-SubadresId.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ObjectId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("adres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CrabAddressListItemAddress Adres { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CrabSubAddressListResponse 
    {
        /// <summary>De verzameling van adressen.</summary>
        [Newtonsoft.Json.JsonProperty("crabSubadressen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CrabSubAddressListItem> CrabSubadressen { get; set; }
    
        /// <summary>De URL voor het ophalen van de volgende verzameling.</summary>
        [Newtonsoft.Json.JsonProperty("volgende", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Volgende { get; set; }
    
    
    }
    
    /// <summary>De identificator van het gebouw.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GebouwCrabIdentificator 
    {
        /// <summary>De objectidentificator (enkel uniek binnen naamruimte).</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectId { get; set; }
    
    
    }
    
    /// <summary>Het gebouw in het gebouwenregister.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CrabGrarGebouw 
    {
        [Newtonsoft.Json.JsonProperty("identificator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GebouwCrabIdentificator Identificator { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BuildingCrabMappingItem 
    {
        /// <summary>De TerreinObjectId gekend in CRAB.</summary>
        [Newtonsoft.Json.JsonProperty("terreinObjectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TerreinObjectId { get; set; }
    
        /// <summary>Het CRAB-IdentificatorTerreinObject.&lt;br /&gt;
        /// (= OIDN van de corresponderende GRB-gebouwgeometrie) &lt;br /&gt;
        /// (= enige identificator waarmee in Lara op gebouw kan gezocht worden)</summary>
        [Newtonsoft.Json.JsonProperty("identificatorTerreinObject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificatorTerreinObject { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gebouw", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CrabGrarGebouw Gebouw { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BuildingCrabMappingResponse 
    {
        /// <summary>Collectie van CRAB-gebouwen</summary>
        [Newtonsoft.Json.JsonProperty("crabGebouwen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BuildingCrabMappingItem> CrabGebouwen { get; set; }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108